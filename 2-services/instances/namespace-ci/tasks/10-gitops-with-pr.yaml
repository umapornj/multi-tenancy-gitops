apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-gitops-with-pr
  annotations:
    description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: app-name
      default: ""
    - name: src-environment
      default: ""
    - name: dest-environment
      default: ""
    - name: app-type
      default: ""
    - name: source-dir
      default: /source
    - name: subdir
      default: ""
    - name: parentdir
      default: ""
    - name: yaml
      default: "requirements.yaml"
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: gitops
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_PARENT_DIR
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: parentdir
              optional: true
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: protocol
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: host
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: org
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: branch
              optional: true
      script: |
          #!/usr/bin/env bash
          set -ex

          APP_NAME="$(params.app-name)"
          APP_TYPE="$(params.app-type)"
          SUBDIR="$(params.subdir)"

          if [[ -z "${SUBDIR}" ]]; then
            SUBDIR="${APP_NAME}"
          fi

          if [[ -n "$(params.parentdir)" ]]; then
            PARENT_DIR_SRC="$(params.parentdir)/$(params.app-type)/$(params.src-environment)"
            PARENT_DIR_DEST="$(params.parentdir)/$(params.app-type)/$(params.dest-environment)"
          elif [[ -n "${GIT_PARENT_DIR}" ]] && [[ "${GIT_PARENT_DIR}" = "bash -c"* ]]; then
            PARENT_DIR_SRC=$(eval $GIT_PARENT_DIR | tail -n 1)"/$(params.app-type)/$(params.src-environment)"
            PARENT_DIR_DEST=$(eval $GIT_PARENT_DIR | tail -n 1)"/$(params.app-type)/$(params.dest-environment)"
          elif [[ -n "${GIT_PARENT_DIR}" ]]; then
            PARENT_DIR_SRC="${GIT_PARENT_DIR}/$(params.app-type)/$(params.src-environment)"
            PARENT_DIR_DEST="${GIT_PARENT_DIR}/$(params.app-type)/$(params.dest-environment)"
          else
            PARENT_DIR_SRC="."
            PARENT_DIR_DEST="."
          fi

          SUBDIR_SRC="${PARENT_DIR_SRC}/${SUBDIR}"
          SUBDIR_DEST="${PARENT_DIR_DEST}/${SUBDIR}"

          echo ${SUBDIR_SRC}
          echo ${SUBDIR_DEST}

          PROTOCOL="${GIT_PROTOCOL}"
          if [[ -z "${PROTOCOL}" ]]; then
            PROTOCOL="https"
          fi

          YAML_FILE="$(params.yaml)"

          if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z "${GIT_REPO}" ]]; then
              echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
              exit 0
          fi

          set +x

          if [[ -n "${GIT_USERNAME}" ]]; then
            GIT_AUTH_USER="${GIT_USERNAME}"
            GIT_AUTH_PWD="${GIT_PASSWORD}"
          else
            echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
            exit 1
          fi

          set -x

          BRANCH_CMD=""
          if [[ -n "${GIT_BRANCH}" ]]; then
            BRANCH_CMD="-b ${GIT_BRANCH}"
          fi

          git config --global user.email "gitops@cloudnativetoolkit.dev"
          git config --global user.name "Cloud Native Toolkit Pipeline"
          echo "git clone ${BRANCH_CMD} ${PROTOCOL}://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          set +x
          GIT_URL="${PROTOCOL}://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd
          set -x
          cd gitops_cd

          VERSION="$(grep 'version:' ./$(params.app-type)/$(params.src-environment)/$(params.app-name)/requirements.yaml | awk 'NR==1{print $2}')"
          HELM_URL="$(grep 'repository:' ./$(params.app-type)/$(params.src-environment)/$(params.app-name)/requirements.yaml | awk 'NR==1{print $2}')"

          files=$(ls ${SUBDIR_DEST} | wc -l)

          if [[ "$(params.dest-environment)" = "namespace-staging" ]]; then
            ENV=$(echo $(params.dest-environment) | cut -d "-" -f2)
            echo ${ENV}
            if [[ -d "${SUBDIR_DEST}" && ${files} -ge 3 ]]; then
              echo "${SUBDIR_DEST} is present and files are existing"
              rm -rf ${SUBDIR_DEST}/${YAML_FILE} && cp -r ${SUBDIR_SRC}/${YAML_FILE} ${SUBDIR_DEST}/${YAML_FILE}
            else
              if [[ -d "${SUBDIR_DEST}" && ${files} -lt 3 ]]; then
                echo "${SUBDIR_DEST} is present but files are not existing"
                rm -rf ${SUBDIR_DEST}
              else
                echo "Creating first time chart using ${SUBDIR_DEST}"
              fi

              # create directory
              mkdir -p "${SUBDIR_DEST}"

              # WARNING: Do not indent the cat commands below

          cat <<EOF >"${SUBDIR_DEST}/Chart.yaml"
          apiVersion: v2
          version: 0.1.0
          name: ${APP_NAME}
          description: Chart to configure ArgoCD with the ${APP_NAME} project and its applications
          dependencies:
            - name: argocd-hook-job
              version: 0.1.4
              repository: https://cloud-native-toolkit.github.io/toolkit-charts/
          EOF

          cat <<EOF >"${SUBDIR_DEST}/${YAML_FILE}"
          dependencies:
            - name: ${APP_NAME}
              version: ${VERSION}
              repository: ${HELM_URL}
            - name: argocd-hook-job
              version: 0.1.4
              repository: https://cloud-native-toolkit.github.io/toolkit-charts/
          EOF

          cat <<EOF >"${SUBDIR_DEST}/values.yaml"
          global: {}
          ${APP_NAME}:
            replicaCount: 1
          argocd-hook-job:
            name: postsync-trigger-for-${ENV}
            namespace: ci
            hook:
              enabled: true
              hooktype: PostSync
            hookdeletepolicy:
              enabled: true
              hookdeletepolicytype: HookSucceeded
            serviceaccount: pipeline-hook-argocd-hook-job
            roleaccess:
              - verbs:
                  - '*'
                apiGroups:
                  - 'tekton.dev'
                resources:
                  - pipelines
                  - tasks
            init:
              enabled: false
            container:
              image: "quay.io/rhcanada/tkn-cli"
              tag: "latest"
              command: "tkn"
              args:
                - -n
                - ci
                - pipeline
                - start
                - ibm-mq-promote-stage-prod
                - --param
                - src-environment="namespace-staging"
                - --param
                - dest-environment="namespace-prod"
                - --param
                - app-type="${APP_TYPE}"
                - --param
                - app-name="${APP_NAME}"
          EOF

            fi
          elif [[ "$(params.dest-environment)" = "namespace-prod" ]]; then
            if [[ -d "${SUBDIR_DEST}" && ${files} -ge 3 ]]; then
              echo "${SUBDIR_DEST} is present and files are existing"
              rm -rf ${SUBDIR_DEST}/${YAML_FILE}

          cat <<EOF >"${SUBDIR_DEST}/${YAML_FILE}"
          dependencies:
            - name: ${APP_NAME}
              version: ${VERSION}
              repository: >-
                ${HELM_URL}
          EOF

            else
              if [[ -d "${SUBDIR_DEST}" && ${files} -lt 3 ]]; then
                echo "${SUBDIR_DEST} is present but files are not existing"
                rm -rf ${SUBDIR_DEST}
              else
                echo "Creating first time chart using ${SUBDIR_DEST}"
              fi
              # create directory
              mkdir -p "${SUBDIR_DEST}"

              # WARNING: Do not indent the cat commands below
          cat <<EOF >"${SUBDIR_DEST}/Chart.yaml"
          apiVersion: v2
          version: 0.1.0
          name: ${APP_NAME}
          description: Chart to configure ArgoCD with the ${APP_NAME} project and its applications
          EOF

          cat <<EOF >"${SUBDIR_DEST}/${YAML_FILE}"
          dependencies:
            - name: ${APP_NAME}
              version: ${VERSION}
              repository: >-
                ${HELM_URL}
          EOF

          cat <<EOF >"${SUBDIR_DEST}/values.yaml"
          global: {}
          ${APP_NAME}:
            replicaCount: 1
          EOF
            fi
          else
            echo "Destination environment does not exist"
          fi

          APP_VERSION="$(git rev-parse HEAD | cut -c 1-8)"

          if [[ $(git status -s | wc -l) -eq 0 ]]; then
            echo "No changes"
            exit 0
          else
            git checkout -b cntk-ci-pipeline-${APP_NAME}-${APP_VERSION}

            # push changes to git
            git status
            git add "${SUBDIR_DEST}/"
            git commit -m "Cloudnative toolkit pipeline updates ${APP_NAME}" --no-edit --signoff

            git push origin cntk-ci-pipeline-${APP_NAME}-${APP_VERSION}

            GIT_PUSH_URL="${PROTOCOL}://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/pulls"
            curl -u ${GIT_AUTH_USER}:${GIT_AUTH_PWD} -d '{"title":"PR to promote to '$(params.dest-environment)' for '$(params.app-name)'","base":"'${GIT_BRANCH}'", "head":"'${GIT_ORG}':cntk-ci-pipeline-'${APP_NAME}'-'${APP_VERSION}'"}' ${GIT_PUSH_URL}

          fi
